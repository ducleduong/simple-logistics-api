// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id      Int    @id @default(autoincrement()) @map("id")
  name    String @unique @map("name")
  stateId Int    @map("state_id")

  state   State     @relation(name: "state_cities_fk", fields: [stateId], references: [id], onDelete: Cascade)
  Address Address[]
}

model Country {
  id      Int       @id @default(autoincrement()) @map("id")
  name    String    @unique @map("name")
  states  State[]   @relation(name: "countries_states_fk")
  Address Address[]
}

model State {
  id        Int    @id @default(autoincrement()) @map("id")
  name      String @unique @map("name")
  countryId Int    @map("country_id")

  cities City[] @relation(name: "state_cities_fk")

  country Country   @relation(name: "countries_states_fk", fields: [countryId], references: [id], onDelete: Cascade)
  Address Address[]
}

model Address {
  addressId  Int    @id @default(autoincrement()) @map("address_id")
  address    String @map("address")
  cityId     Int    @map("city_id")
  stateId    Int    @map("state_id")
  countryId  Int    @map("country_id")
  postalCode String @map("postal_code")

  city      City       @relation(fields: [cityId], references: [id])
  state     State      @relation(fields: [stateId], references: [id])
  country   Country    @relation(fields: [countryId], references: [id])
  customers Customer[] @relation(name: "address_customer_fk")

  shippments Order[] @relation(name: "order_shipping_address_fk")
  recipients Order[] @relation(name: "order_recipient_address_fk")
}

model Customer {
  customerId Int    @id @default(autoincrement()) @map("customer_id")
  firstName  String @map("first_name")
  lastName   String @map("last_name")
  userId     Int    @map("user_id")

  ownerUser User @relation(name: "customer_user_fk", fields: [userId], references: [userId], onDelete: Cascade)

  addresses Address[] @relation(name: "address_customer_fk")

  orders Order[] @relation(name: "order_customer_fk")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  FAILED
  RETURNED
  REFUNDED
}

model Order {
  orderId              Int         @id @default(autoincrement()) @map("order_id")
  customerId           Int         @map("customer_id")
  recipientAddressId   Int         @map("recipient_address_id")
  shippingAddressId    Int         @map("shipping_address_id")
  shippingDate         DateTime?   @map("shipping_date")
  expectedDeliveryDate DateTime    @map("expected_delivery_date")
  status               OrderStatus @map("status")
  userId               Int         @map("user_id")

  customer         Customer @relation(name: "order_customer_fk", fields: [customerId], references: [customerId])
  recipientAddress Address  @relation(name: "order_recipient_address_fk", fields: [recipientAddressId], references: [addressId])
  shippingAddress  Address  @relation(name: "order_shipping_address_fk", fields: [shippingAddressId], references: [addressId])
  user             User     @relation(name: "user_order_fk", fields: [userId], references: [userId], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
  STAFF
}

model User {
  userId    Int    @id @default(autoincrement()) @map("user_id")
  firstName String @map("first_name")
  lastName  String @map("last_name")
  email     String @unique @map("email")
  password  String @map("password")
  username  String @unique @map("username")
  role      Role   @default(USER) @map("role")

  orders    Order[]    @relation(name: "user_order_fk")
  customers Customer[] @relation(name: "customer_user_fk")
  Review    Review[]   @relation(name: "review_user_fk")
}

model Review {
  reviewId Int    @id @default(autoincrement()) @map("review_id")
  rating   Int    @map("rating")
  content  String @map("content")
  userId   Int    @map("user_id")

  user User @relation(name: "review_user_fk", fields: [userId], references: [userId], onDelete: Cascade)
}
